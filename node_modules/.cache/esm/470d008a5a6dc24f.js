let Koa,Router,bodyParser,mongoose;_5a6‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_5a6‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_5a6‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_5a6‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);require('dotenv').config();
// const Koa = require('koa');
// const Router = require('koa-router');
// const bodyParser = require('koa-bodyparser');
// const mongoose = require('mongoose');





// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env;

mongoose
    .connect(MONGO_URI)
    .then(() => {
        console.log('Connected to MongoDB!');
    })
    .catch((e) => {
        _5a6‍.g.console.error(e);
    });

const api = require('./api');

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

// 포트가 지정되어 있지 않다면 4000을 사용
const port = PORT || 4000;
app.listen(port, () => {
    _5a6‍.g.console.log('Listening to port %d', port);
});
